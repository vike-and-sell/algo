version: "3.8"
#define and link the two service containers (db and flask api)
services:
  # define data layer api
  dl_flask_api:
    build: ./elastic-layer
    container_name: elastic-layer
    ports:
      - "4500:4500"
    environment:
      RDS_USERNAME: ${POSTGRES_USER}
      RDS_PASSWORD: ${POSTGRES_PASSWORD}
      RDS_HOSTNAME: v_s_db-e
      RDS_PORT: 5432
      RDS_DB_NAME: ${POSTGRES_DB}
    depends_on:
      v_s_db:
        condition: service_healthy
    

  # define the db service
  v_s_db-e:
    # get postgres image
    image: postgres
    container_name: v_s_db-e
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - db-volume:/var/lib/postgresql/data
      - ./data-dump/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      # used in flask container depends_on condition to wait for the DB to be ready
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 20s
      retries: 5

  elasticsearch:
    image: elasticsearch:8.8.0
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD 
      - "discovery.type=single-node" 
      - "xpack.security.http.ssl.enabled=false" 
      - "xpack.license.self_generated.type=trial"

volumes:
  # to persist the database tables
  db-volume:

